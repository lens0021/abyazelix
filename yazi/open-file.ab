import { contains } from "std/text"
import { dir_exist, file_append, file_exist, file_write } from "std/fs"
import { get_env_var } from "std/env"

fun zellij_current_tab(): Text? {
    let layout = $ zellij action dump-layout $?
    // Find the focused tab
    layout = $ echo -e "{layout}" | grep -E '^    tab.+focus=true' -A 1000 | grep '^    }' --max-count 1 -B 1000 $?
    // Remove indentation
    layout = $ echo -e "{layout}" | cut -d' ' -f5- $?

    return layout
}

fun zellij_current_pane(): Text? {
    let tab = zellij_current_tab()?
    // Find the focused tab
    tab = $ echo -e "{tab}" | grep -E '^(    )+pane.+focus=true' -A 1000 | grep -E '^(    )+}' --max-count 1 -B 1000 $?
    // Remove indentation
    tab = $ echo -e "{tab}" | cut -d' ' -f5- $?

    return tab
}

fun zellij_write_chars(chars: Text): Null? {
    $ zellij action write-chars "{chars}" $?
    $ zellij action write 13 $?
}

fun log(log: Text): Null? {
    let path = get_env_var("HOME") + "/.config/abyazelix/debug.log"
    if file_exist(path): file_append(path, log)?
    else: file_write(path, log)?
}

fun open_new_helix(path: Text): Null? {
    // The current pane is not running helix, so open helix in a new pane
    $ zellij action new-pane $?
    $ sleep 0.4 $?
    // Get the working directory
    let working_dir = dir_exist(path) then path else $dirname "{path}"$?
    zellij_write_chars("cd {working_dir}; hx {path} -w {working_dir}")?
}

main(args) {
    let path = args[1]
    log(path)?
    if path == "": fail 1

    if contains(zellij_current_tab()?, " command=\"hx\" ") {
        // Move focus to the next pane
        let limit = 1
        let cnt = 0
        loop {
            if cnt > limit {
                open_new_helix(path)?
                break
            }
            cnt += 1
            $ zellij action focus-next-pane $?
            if contains(zellij_current_pane()?, " command=\"hx\" ") {
                // The current pane is running helix, use zellij actions to open the file
                $ zellij action write 27 $?
                zellij_write_chars(":open \"{path}\"")?
                break
            }
        }
    } else {
        open_new_helix(path)?
    }
}


