import {contains} from "std/text"
import {dir_exist, file_append, file_exist, file_write} from "std/fs"
import {get_env_var} from "std/env"

fun log(log: Text): Null {
    let path = get_env_var("HOME") + "/.config/abyazelix/debug.log"
    if file_exist(path): unsafe file_append(path, log)
    else: unsafe file_write(path, log)
}

fun random_text(len: Num = 8): Text? {
    return $tr -dc a-z0-9 </dev/urandom | head -c {len}$?
}

fun zellij_action(action: Text): Text {
    return $ zellij action {action} 2>&1 $ failed {
        log("Failed to `{action}`")
        return ""
    }
}

fun zellij_write_chars(chars: Text): Null {
    zellij_action("write-chars \"{chars}\"")
    zellij_action("write 13")
}

fun zellij_current_tab(): Text? {
    let layout = zellij_action("dump-layout")
    // Find the focused tab
    layout = $echo -e "{layout}" | grep -E '^    tab.+focus=true' -A 1000 | grep '^    }' --max-count 1 -B 1000$ failed {
        log("no focused")
        let rand = random_text()?
        zellij_action("rename-tab {rand}")
        layout = $echo -e "{layout}" | grep -E '^    tab.+name="{rand}"' -A 1000 | grep '^    }' --max-count 1 -B 1000$?
        zellij_action("undo-rename-tab")
    }
    // Remove indentation
    layout = $echo -e "{layout}" | cut -d' ' -f5-$?

    return layout
}

main(args) {
    let path = args[1]
    log(path)
    if path == "": fail 1

    if contains(zellij_current_tab()?, " command=\"hx\" ") {
        // Move focus to the next pane
        zellij_action("focus-next-pane")
        // The current pane is running helix, use zellij actions to open the file
        zellij_action("write 27")
        zellij_write_chars(":open \"{path}\"")
    }
    else {
        // The current pane is not running helix, so open helix in a new pane
        zellij_action("new-pane")
        $sleep 0.4$?
        // Get the working directory
        let working_dir = dir_exist(path) then path else $dirname "{path}"$?
        zellij_write_chars("cd {working_dir}; hx {path} -w {working_dir}")
    }
}


